# Copyright (c) 2014-2017, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import scapy.all as scapy

LOCAL_PORT_NAME = 'p'
LOCAL_SOCKET_PATH = '/tmp/mdc_dp_%s.sock' % LOCAL_PORT_NAME



CONST_DATA_SIZE = 46

num_cores = int($BESS_CORES!'3')
data_pkt_size = int($BESS_DATA_PKT_SIZE!'1024')

assert 64 <= data_pkt_size <= 1024, 'Data pkts needs to be in the range [64, 1024] in bytes'

print('Core count = %d' % num_cores)
print('Data pkt size = %d' % data_pkt_size)

# Data pkt
class MDCData(scapy.Packet):
    name = 'MulticastDataCenterData '
    fields_desc=[scapy.ShortField('addr', 0),
                 scapy.XByteField('mode', 0),
                 scapy.XByteField('label' , 0),
                 scapy.ByteEnumField("code", 5, {1:"REQUEST",2:"PTCH_REQ",3:"DATA_FNSD",4:"PTCH_DATA", 5:"DATA"}),
                 scapy.XByteField('appID' , 2),
                 scapy.XByteField('dataID' , 0),
                 scapy.XByteField('sn' , 0),
                 scapy.XByteField('dataSize' , 99)]


# Data pkt template
data_eth = scapy.Ether(src='aa:bb:cc:dd:ee:01', dst='11:22:33:44:55:01', type=0x0800)
data_ip = scapy.IP(src='10.1.0.1', dst='10.0.0.1')
data_udp = scapy.UDP(sport=10001, dport=10002)
unlabeled_data_mdc = MDCData(addr=0x1c1e, mode=0xaa, label=0x0)
data_payload = bytes(unlabeled_data_mdc) + b"\0" * (data_pkt_size-CONST_DATA_SIZE)
unlabeled_data_pkt = data_eth/data_ip/data_udp/data_payload
unlabeled_data_pkt_bytes = bytes(unlabeled_data_pkt)



data_eth_2 = scapy.Ether(src='aa:bb:cc:dd:ee:01', dst='11:22:33:44:55:01', type=0x0800)
data_ip_2 = scapy.IP(src='10.1.0.1', dst='10.0.0.1')
data_udp_2 = scapy.UDP(sport=10001, dport=10002)
unlabeled_data_mdc_2 = MDCData(addr=0x1a1b, mode=0x10, label=0x0)
data_payload_2 = bytes(unlabeled_data_mdc_2) + b"\0" * (data_pkt_size-CONST_DATA_SIZE)
unlabeled_data_pkt_2 = data_eth_2/data_ip_2/data_udp_2/data_payload_2
unlabeled_data_pkt_bytes_2 = bytes(unlabeled_data_pkt_2)

# If in NUMA system, ensure to use CPU cores in the same socket of your NIC.
# TODO: this needs to depend on the CPU layout and where the NIC is.
start_core = 0
for i in range(num_cores):
    bess.add_worker(wid=i, core=i+start_core)


# Creates mDC modules: a receiver, a control pkt generator and Health check
mdc_switch::AwsMdcSwitch(switch_macs=['11:22:33:44:55:01', '11:22:33:44:55:02'],
                          switch_ips=['10.0.0.1', '10.0.0.2'],
                          agents_macs=['aa:bb:cc:dd:ee:01', 'aa:bb:cc:dd:ee:02'],
                          agents_ips=['10.1.0.1', '10.1.0.2'],
                          )

mdc_rec1::AwsMdcReceiver(agent_id=0x01,
                         switch_mac='11:22:33:44:55:01',
                         agent_mac='aa:bb:cc:dd:ee:01',
                         switch_ip='10.0.0.1',
                         agent_ip='10.1.0.1',
                         )

mdc_rec2::AwsMdcReceiver(agent_id=0x02,
                          switch_mac='11:22:33:44:55:02',
                          agent_mac='aa:bb:cc:dd:ee:02',
                          switch_ip='10.0.0.2',
                          agent_ip='10.1.0.2',
                          )

# Adds (session address, label) tuples to the MdcReceiver module
mdc_rec1.add(entries=[{'addr': '1a:1b', 'label': 0x02}])

# mdc_rec1:0 -> 0:mdc_switch
# mdc_rec2:0 -> 1:mdc_switch
# mdc_switch:0 -> bq1::BufferedQueue()
# mdc_switch:1 -> Queue()

# mdc_rec1:1 -> rec1_mypkts::Sink()
# mdc_rec2:1 -> rec2_mypkts::Sink()

# Traffic generator: this generates data pkts unlike the MdcPktGen that generate ctrl pkts
# Recommended: Use when the NIC has at least 2 ports, and when you want to generate traffic using BESS
# Data rate depends on the capacity (Gbps), and data_pkt_size and Ethernet framing overhead (bytes)
tgen_pkt_rate = 0.05 * 1e9 / (8 * (data_pkt_size + 24))
bess.add_tc('tgen', policy='rate_limit', resource='packet', limit={'packet': 10})
bess.add_tc('tgen1', policy='rate_limit', resource='packet', limit={'packet': 1})
bess.add_tc('tgen2', policy='rate_limit', resource='packet', limit={'packet': 1})
tgen_src::Source()
tgen_src.attach_task('tgen')

split::RandomSplit(gates=range(2))
p = UnixSocketPort(name='p', path=LOCAL_SOCKET_PATH)
PortInc(port='p') -> bq1::Controller() -> FileWriter()
# bq1  -> PortOut(port='p')
# tgen_src -> bq1::Controller() -> BufferedQueue() -> Sink()



# Creates a source, and limits its pkt rate
# tgen_src::Source()
# tgen_src.attach_task('tgen')
# bq1.attach_task('tgen1')
# bq2.attach_task('tgen2')

# Sends generated traffic on Port1
# Source() -> Rewrite(templates=[unlabeled_data_pkt_bytes]) -> 7:mdc_switch
# tgen_src -> Rewrite(templates=[unlabeled_data_pkt_bytes_2]) -> 6:mdc_switch
