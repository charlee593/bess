// Copyright (c) 2017, The Regents of the University of California.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// * Neither the names of the copyright holders nor the names of their
// contributors may be used to endorse or promote products derived from this
// software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package sample.controller.pb;

/**
 * The module Queue has a function `set_burst(...)` that allows you to specify
 * the maximum number of packets to be stored in a single PacketBatch released
 * by the module.
 */
message ControllerCommandSetBurstArg {
  uint64 burst = 1; /// The maximum "burst" of packets (ie, the maximum batch size)
}

/**
 * The module Queue has a function `set_size(...)` that allows specifying the
 * size of the queue in total number of packets.
 */
message ControllerCommandSetSizeArg {
  uint64 size = 1; /// The maximum number of packets to store in the queue.
}

/**
 * Modules that are queues or contain queues may contain functions
 * `get_status()` that return QueueCommandGetStatusResponse.
 */
message ControllerCommandGetStatusArg {}

/**
 * Modules that are queues or contain queues may contain functions
 * `get_status()` that take no parameters and returns the queue occupancy and
 * size.
 */
message ControllerCommandGetStatusResponse {
  uint64 count = 1;    /// The number of packets currently in the queue.
  uint64 size = 2;     /// The maximum number of packets the queue can contain.
  uint64 enqueued = 3; /// total enqueued
  uint64 dequeued = 4; /// total dequeued
  uint64 dropped = 5;  /// total dropped
}

/**
 * The Queue module implements a simple packet queue.
 *
 * __Input Gates__: 1
 * __Output Gates__: 1
 */
message ControllerArg {
  uint64 size = 1; /// The maximum number of packets to store in the queue.
  bool prefetch = 2; /// When prefetch is enabled, the module will perform CPU prefetch on the first 64B of each packet onto CPU L1 cache. Default value is false.
  bool backpressure = 3; // When backpressure is enabled, the module will notify upstream if it is overloaded.
}
